/**
 *  implement ListVsSetDemo as described below.
 *  Ad  ListVsSetDemo:
 *Implement ListVsSetDemo as specified in the UML diagram. 
 *Important: ListVsSetDemo should NOT  include any print methods
 *  
 */

package listVsSet;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ListVsSetDemo {
List<ColoredSquare> list;
Set<ColoredSquare> set;
StringBuilder sb = new StringBuilder();

public ListVsSetDemo(ColoredSquare... elements) {
  this.list = new ArrayList<>(Arrays.asList(elements));
  this.set = new HashSet<>(Arrays.asList(elements));
  
  /**
   * Notice: even though the parameter of the constructor is defined as an array of type ColoredSquare,
   *  I want you to implement it as varargs.  
   *  This is a good review and it provides a convenient way to call the constructor.              
   * constructor: The constructor uses the elements passed to initialize both the list and the set
   * 
   */
}

public String getListElements() {
        sb.setLength(0);
        for (ColoredSquare element : list){
            sb.append(element.toString());
            sb.append("\n");
        }
        return sb.toString();
    }
/**
 * getListElements, getSetElements:return a formatted string containing
 *  all the elements of the collection - one element per line.  
 * (see Console Output) Hint: use StringBuilder to create that string
 * @return
 */
    
    public String getSetElements() {
        sb.setLength(0);
        for (ColoredSquare element : set){
            sb.append(element.toString());
            sb.append("\n");
        }
        return sb.toString();
    }
    
     public void addElement(ColoredSquare el){
         list.add(el);
         set.add(el);
     }
/**
 * addElement:Adds the element passed to both the list and the set
 */
}
