/**
 * Use the internet to learn about Set, HashSet, and other topics
 * Understand the 2 major differences between interface Set and interface List
 * Create, initialize, and display a HashSet
 * Practice implementing a GUI application with WindowBuilder
 * Experience the benefit of separating functionality from display
 * Implement the classes ColoredSquare
 * 
 * Ad  ColoredSquare:
 * Implement ColoredSquare as specified in the UML diagram.
 * Do not add or remove any class members.
 *  Important: ColoredSquare should NOT  include any print methods
 * 
 */




package listVsSet;

import java.awt.Color;

public class ColoredSquare {
int side;
Color color;

public ColoredSquare(int side, Color color) {
  this.side = side;
  this.color = color;
}

public int area() {
  return side*side;
}

@Override
public int hashCode() {
  final int prime = 31;
  int result = 1;
  result = prime * result + ((color == null) ? 0 : color.hashCode());
  result = prime * result + side;
  return result;
}

@Override
public boolean equals(Object obj) {
  if (this == obj)
   return true;
  if (obj == null)
   return false;
  if (!(obj instanceof ColoredSquare))
   return false;
  ColoredSquare other = (ColoredSquare) obj;
  if (color == null) {
   if (other.color != null)
    return false;
  } else if (!color.equals(other.color))
   return false;
  if (side != other.side)
   return false;
  return true;
}
/**
 * equals:
 2 colored squares should be considered equal if they have the same size and color.  
 Use Eclipse to auto-implement equals and hashCode 
 */


@Override
    public String toString() {
        String hex = Integer.toHexString(color.getRGB() & 0xffffff).toUpperCase();
        if (hex.length() < 6){
            hex = "000000".substring(0, 6 - hex.length()) + hex;
        }
        return "side:" + side + " #" + hex;
    }
/**
 * toString:
 *Eclipse can atuo-implement toString but in our case that would be a rather verbose description. 
 *Because of that I want you to write your own implementation that produces an output as shown on the right
 *.e.g.  side:14 #0000FF   side:12 #FFFF00   etc.
 *Notice: the toString method of Color displays the rgb values in decimal format, 
 *however, in our implementation we use a hexadecimal format like in HTML.
 *Hint 1: To get the individual red, green, blue values check out class Color .
 *Hint 2: Info on how to format an integer as a 2-digit hexadecimal value
 */
    

}

